
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    match /spaces/{spaceId} {
      // Allow reading a single document if the user is a member.
      allow get: if request.auth.uid in resource.data.memberIds;

      // Allow listing documents only if the query filters by the user's membership.
      allow list: if request.auth.uid != null && request.query.where.path == "memberIds" && request.query.where.op == "array-contains" && request.query.where.value == request.auth.uid;
      
      // Allow any authenticated user to create a space.
      allow create: if request.auth.uid != null;
      
      // Allow updates only if the user is a member.
      allow update: if request.auth.uid in resource.data.memberIds;
      
      // Allow deletion only if the user is the owner (first member).
      allow delete: if request.auth.uid == resource.data.memberIds[0];
      
      // Rules for subcollections (posts, ideas).
      match /{subcollection}/{docId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.memberIds;
      }
    }

    match /invites/{inviteId} {
        // Allow the creator to read their sent invite.
        allow read: if request.auth.uid == resource.data.fromUser.id;
        // Allow the invited user to read the invite.
        allow read: if request.auth.token.email == resource.data.toEmail;

        // Allow creating an invite if the user is a member of the space they are inviting to.
        allow create: if request.auth.uid in get(/databases/$(database)/documents/spaces/$(request.resource.data.spaceId)).data.memberIds;

        // Allow the invited user to update (accept/decline) or the owner to delete.
        allow update, delete: if request.auth.token.email == resource.data.toEmail || request.auth.uid == resource.data.fromUser.id;
    }

    match /notifications/{notificationId} {
      allow read, write, delete: if request.auth.uid == resource.data.userId;
    }
  }
}
