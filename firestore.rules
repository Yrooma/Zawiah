rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isMember(spaceId) {
      return request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.memberIds;
    }
    
    function isOwner(spaceId) {
      return request.auth.uid == get(/databases/$(database)/documents/spaces/$(spaceId)).data.team[0].id;
    }

    function isJoining(spaceId) {
      // The user performing the request
      let user = request.auth;
      // The space document *before* the update
      let existingSpace = resource.data;
      // The space document *after* the proposed update
      let newSpace = request.resource.data;

      // Allow the update if:
      // 1. The user is authenticated.
      return user != null &&
             // 2. The user is NOT currently a member.
             !(user.uid in existingSpace.memberIds) &&
             // 3. The new member list is exactly the old list plus the new user's ID.
             newSpace.memberIds == existingSpace.memberIds.append(user.uid) &&
             // 4. The workspace is not already full.
             existingSpace.memberIds.size() < 3;
    }

    // Users can only read/update their own profile
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      // Allow user creation on signup
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    // Spaces
    match /spaces/{spaceId} {
      // Allow creation by any authenticated user
      allow create: if request.auth != null;

      // Allow read only by members of the space
      allow read: if isMember(spaceId);

      // Allow updates if user is a member OR if they are in the process of joining
      allow update: if isMember(spaceId) || isJoining(spaceId);

      // Allow delete only by the owner
      allow delete: if isOwner(spaceId);

      // Subcollections
      match /{collection}/{docId} {
        // Allow full access only to members of the parent space
        allow read, write, delete: if isMember(spaceId);
      }
    }
    
    // Notifications can only be read by the intended user
    match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == request.resource.data.userId;
    }
  }
}
