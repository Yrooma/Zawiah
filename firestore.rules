rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/write their own user document
    match /users/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }

    // Rules for spaces
    match /spaces/{spaceId} {
      // Allow list/query if the user is querying for their own spaces
      allow list: if request.auth.uid != null && request.query.where.size() == 1 &&
                     'memberIds' in request.query.where &&
                     'array-contains' in request.query.where.memberIds &&
                     request.auth.uid == request.query.where.memberIds['array-contains'];
      
      // Allow read on a single document if user is a member
      allow read: if request.auth.uid in resource.data.memberIds;
      
      // Allow create for any authenticated user
      allow create: if request.auth.uid != null;

      // Allow update if user is a member OR if they are adding themselves
      allow update: if (request.auth.uid in resource.data.memberIds) ||
                      (request.auth.uid != null && 
                       request.resource.data.memberIds.size() == resource.data.memberIds.size() + 1 &&
                       request.auth.uid in request.resource.data.memberIds);

      // Allow delete only for the owner (first member in the team)
      allow delete: if request.auth.uid == resource.data.team[0].id;

      // Rules for posts within a space
      match /posts/{postId} {
        allow read, create, update, delete: if request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.memberIds;
      }

      // Rules for ideas within a space
      match /ideas/{ideaId} {
        allow read, create, update, delete: if request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.memberIds;
      }
    }
    
    // Rules for notifications
    match /notifications/{notificationId} {
      allow read, create, update, delete: if request.auth.uid == resource.data.userId;
    }
  }
}
