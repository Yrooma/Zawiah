rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return request.auth.uid == userId;
    }

    // Users can read and write their own data
    match /users/{userId} {
      allow read, write: if isUser(userId);
    }

    // Rules for the 'spaces' collection
    match /spaces/{spaceId} {
      // A user can read a space if their UID is in the memberIds list
      // OR if they are validating an invite token (any authenticated user can read for validation)
      allow read: if isAuth() && (
        request.auth.uid in resource.data.memberIds ||
        // Allow reading basic space info for token validation
        true
      );
      
      // Any authenticated user can create a space
      allow create: if isAuth();
      
      // Any member of a space can update it, OR
      // A user can join a space if they're adding only themselves and space isn't full
      allow update: if isAuth() && (
        request.auth.uid in resource.data.memberIds ||
        (
          // Allow joining: user is adding themselves to a non-full space
          request.auth.uid in request.resource.data.memberIds &&
          !(request.auth.uid in resource.data.memberIds) &&
          resource.data.memberIds.size() < 3 &&
          request.resource.data.memberIds.size() == resource.data.memberIds.size() + 1
        )
      );
      
      // Only the owner (first member in the list) can delete a space
      allow delete: if isAuth() && resource.data.team[0].id == request.auth.uid;
      
      // Rules for subcollections within a space (posts, ideas)
      match /{subcollection}/{docId} {
        allow read, write: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.memberIds;
      }
    }
    
    // Rules for the 'inviteTokens' collection
    match /inviteTokens/{tokenId} {
      // Anyone can read invite tokens to validate them
      allow read: if isAuth();
      
      // Only space owners can create invite tokens
      allow create: if isAuth() && request.resource.data.ownerId == request.auth.uid;
      
      // Only space owners can delete their invite tokens
      allow delete: if isAuth() && resource.data.ownerId == request.auth.uid;
      
      // Tokens can be updated when used (mark as used)
      allow update: if isAuth();
    }

    // Rules for the 'notifications' collection
    match /notifications/{notificationId} {
      allow read, write: if isAuth() && resource.data.userId == request.auth.uid;
      allow create: if isAuth(); // Can be created by service logic for another user
    }

    // Keep old invites collection for backward compatibility
    match /invites/{inviteId} {
      // The user who sent the invite can read it
      allow read: if isAuth() && request.auth.uid == resource.data.fromUser.id;
      // The user who received the invite (by email) can read it
      allow read: if isAuth() && request.auth.token.email == resource.data.toEmail;
      
      // Any authenticated user can create an invite
      allow create: if isAuth();
      
      // The invited user can update the status (accept/decline)
      allow update: if isAuth() && request.auth.token.email == resource.data.toEmail;
    }
  }
}
